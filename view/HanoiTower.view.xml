<mvc:View xmlns:core="sap.ui.core"
    controllerName="pharelyshau.controller.HanoiTower"
	xmlns:mvc="sap.ui.core.mvc"
	xmlns="sap.m"
	xmlns:f="sap.f"
    core:require="{formatter: 'pharelyshau/model/formatter'}"
    xmlns:dnd="sap.ui.core.dnd"
    xmlns:grid="sap.ui.layout.cssgrid">
	<f:DynamicPage>
        <!-- HEADER -->
		<f:title>
			<f:DynamicPageTitle>
				<f:heading>
					<Title text="{i18n>ttlHanoiTower}" wrapping="true"/>
				</f:heading>
				<f:snappedContent>
                    <Label text="{i18n>lTryHanoiTower}" wrapping="true"/>
                </f:snappedContent>
                <f:expandedContent>
                    <Label text="{i18n>lTryHanoiTower}" wrapping="true"/>
                </f:expandedContent>
			</f:DynamicPageTitle>
		</f:title>
		<f:content>
			<VBox class="phLimitedPageContent sapUiMediumMarginBottom" alignItems="Center" renderType="Bare" >
                <Panel>
                    <!-- HEADER TOOLBAR -->
                    <headerToolbar>
                        <OverflowToolbar height="3rem">
                            <!-- Disc Count -->
                            <Label id="lblDiscCount" text="{i18n>lDiscs}:">
                                <layoutData>
                                    <OverflowToolbarLayoutData group="1" priority="Low"/>
                                </layoutData>
                            </Label>
                            <Select items="{/DiscCounts}" selectedKey="{path: '/DiscCount', type: 'sap.ui.model.type.Integer'}"
                                change="onChangeDiscsCount" ariaLabelledBy="lblDiscCount">
                                <core:ListItem text="{}" key="{}" icon="{parts: ['', '/Records'], formatter: 'formatter.discCountIcon'}"/>
                                <layoutData>
                                    <OverflowToolbarLayoutData group="1" priority="Low"/>
                                </layoutData>
                            </Select>
                            <ToolbarSpacer/>
                            <!-- Time -->
                            <core:Icon src="{i18n>iTime}"/>
                            <VBox renderType="Bare">
                                <Title text="{= !${device>/system/phone} ? ${i18n>ttlTime} + ':' : '' }
                                    {path: '/Time', formatter: 'formatter.timeMinSec'}"/>
                            </VBox>
                            <!-- Moves -->
                            <core:Icon src="{i18n>iStep}" class="sapUiSmallMarginBegin"/>
                            <Title text="{= !${device>/system/phone} ? ${i18n>ttlMoves} + ':' : '' } {/Moves}" />
                            <ToolbarSpacer/>
                            <!-- Buttons -->
                            <Button text="{i18n>btnRestart}" press="onPressRestartGame" icon="{i18n>iRestart}"/>
                            <Button text="{i18n>btnRecords}" press="onPressOpenRecordsDialog" icon="{i18n>iAchievement}"/>
                        </OverflowToolbar>
                    </headerToolbar>
                    <!-- GAME -->
                    <grid:CSSGrid id="gameGrid" items="{/Pegs}" gridAutoFlow="Column"
                        gridTemplateColumns="repeat(3, 33.3333%)">
                        <!-- Peg -->
                        <VBox width="100%" alignItems="Center" justifyContent="End" renderType="Bare">
                            <Title visible="{view>/showMoveButtons}" titleStyle="H6" wrapping="true" wrappingType="Hyphenated" textAlign="Center"
                                text="{i18n>ttlPeg} {= String.fromCharCode(${/Pegs}.indexOf(${}) + 65) }" class="sapUiSmallMarginTop"/>
                            <CustomListItem type="{= !${}.length &amp;&amp; !${view>/selectedPeg} ? 'Inactive' : 'Active'}"
                                press="onPressMoveDiscByBox" selected="{= ${} === ${view>/selectedPeg} }" class="phNoFocus sapUiSmallMarginTop">
                                <VBox renderType="Bare" items="{path: '', templateShareable: true}" class="phPegBox sapUiSmallMarginTop" alignItems="Center" fieldGroupIds="pegs"
                                    height="{= !${view>/pegBoxHeight} ? '100%' : ${view>/pegBoxHeight} + 'px' }" justifyContent="End">
                                    <!-- Disc -->
                                    <Button width="{parts: ['', '/DiscCount', 'view>/discButtonMaxWidth'], formatter: 'formatter.discWidth'}"
                                        text="{}" type="{path: '', formatter: 'formatter.discType'}"
                                        press="onPressFirePegPress" class="phDiscButton">
                                        <layoutData>
                                            <FlexItemData minWidth="28px" maxWidth="100%"/>
                                        </layoutData>
                                        <dragDropConfig>
                                            <dnd:DragDropInfo drop="onDropMoveDisc" enabled="{path: '', formatter: 'formatDiscDragAndDropEnabled'}"
                                                core:require="{formatDiscDragAndDropEnabled: 'pharelyshau/model/formatDiscDragAndDropEnabled'}"
                                                targetElement="gameGrid" targetAggregation="items"/>
                                        </dragDropConfig>
                                    </Button>
                                </VBox>
                                <layoutData>
                                    <FlexItemData minWidth="100%" maxWidth="100%"/>
                                </layoutData>
                            </CustomListItem>
                        </VBox>
                    </grid:CSSGrid>
                    <!-- BUTTONS -->
                    <grid:CSSGrid visible="{view>/showMoveButtons}" items="{/Pegs}" gridAutoFlow="Column"
                        gridTemplateColumns="repeat(3, 33.3333%)" class="sapUiSmallMarginTop">
                        <VBox  items="{path: '/Pegs', templateShareable: true}" alignItems="Center">
                            <Button text="{i18n>btnTo} {= String.fromCharCode(${/Pegs}.indexOf(${}) + 65) }"
                                core:require="{moveButtonVisible: 'pharelyshau/model/formatMoveButtonVisible'}"
                                press="onPressMoveDiscByButton" visible="{path: '', formatter: 'moveButtonVisible'}"/>
                        </VBox>
                    </grid:CSSGrid>
                    <!-- FOOTER TOOLBAR -->
                    <HBox renderType="Bare" alignItems="Center" justifyContent="SpaceBetween"
                        wrap="Wrap" class="sapUiSmallMarginTop">
                        <HBox alignItems="Center" class="sapUiTinyMarginEnd" renderType="Bare">
                            <Label text="{i18n>lShowButtons}" showColon="true" wrapping="true" width="auto"/>
                            <Switch state="{view>/showMoveButtons}" customTextOn=" " customTextOff=" "
                                change="onChangeMoveButtonsSwith"/>
                        </HBox>
                        <Label wrapping="true" text="{i18n>lMinMovesToWin}: {path: '/DiscCount', formatter: 'formatter.formattedMinMovesToWin'}"/>
                    </HBox>
                </Panel>
                <!-- INSTRUCTIONS -->
                <core:Fragment fragmentName="pharelyshau.fragment.HanoiTower.Instructions"
					type="XML" class="sapUiSmallMarginTop"/>
			</VBox>
		</f:content>
	</f:DynamicPage>
</mvc:View>